name: scrape-nec-data
on:
  schedule:
    - cron: '*/30 * * * *'
  workflow_dispatch:
jobs:
  run-scraper:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Python 의존성 캐싱 설정
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip # pip 캐시 저장 경로
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }} # requirements.txt 내용이 바뀌면 캐시 무효화
          restore-keys: |
            ${{ runner.os }}-pip-

      # Playwright 브라우저 캐싱 설정
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright # Playwright 브라우저 저장 경로
          key: ${{ runner.os }}-playwright-chromium-${{ steps.setup-python.outputs.python-version }} # OS, Playwright, Python 버전에 따라 키 생성 (좀 더 안정적인 키 필요 시 Playwright 버전 명시)
          restore-keys: |
            ${{ runner.os }}-playwright-chromium-

      - name: Install Python dependencies and Playwright browsers
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # 브라우저가 캐시에서 복원되었는지 확인하고, 없을 때만 설치 시도 (더 정교한 스크립트 필요)
          # 또는 일단 playwright install을 실행하고, 이미 있으면 빠르게 넘어감
          python -m playwright install --with-deps chromium

      - name: Run scraping script
        env:
          UPSTASH_REDIS_ENDPOINT: "shining-ringtail-14155.upstash.io"
          UPSTASH_REDIS_PORT: "6379"
          UPSTASH_REDIS_PASSWORD: ${{ secrets.UPSTASH_REDIS_PASSWORD_TOKEN }}
        run: python scripts/scrape_push.py

      - name: Upload Playwright screenshots if run failed
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-error-screenshots
          path: playwright-screenshots/
          retention-days: 7
